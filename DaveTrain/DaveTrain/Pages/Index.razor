@page "/"
@using DaveTrain.Data
@inject DateClient DateClient
@inject NavigationManager NavigationManager
@inject PassengerService passengerService;
@inject DestinationService destinationService;

    <div class="container">

        <h1 class="g0">@currentWeekDay</h1>
        <h3 class="g1">@currentMonth</h3>
        <div class="g4">
            <ResultComponent Passengers="@_passengers" Winner="@_winner"></ResultComponent>
        </div>


        <h3 class="g5">Your Name:</h3>
        <select class="g6" @bind="selectedPassengerId">
            <option value=0>@string.Empty</option>

            @for (int i = 0; i < _passengers.Count; i++)
            {
                <option value="@_passengers[i].Id">@_passengers[i].Name</option>
            }
        </select>

        <h3 class="g7">Where for Lunch ?</h3>
        <select class="g8" @bind="_selectdDestinationId">
            <option value=0>@string.Empty</option>

            @for (int i = 0; i < _destinations.Count; i++)
            {
                <option value="@_destinations[i].Id">@_destinations[i].name</option>
            }
        </select>


        <button class="g9 btn-danger" @onclick="OnSubmit">
            Submit
        </button>

        <button class="g10 btn-warning" @onclick="ResetAllVotes">
            Reset
        </button>


    </div>

@code{

    private string currentWeekDay = "Loading...";
    private string currentMonth;
    private List<PassengerModel> _passengers;
    private string selectedPassenger;
    private int selectedPassengerId { get; set; }
    private List<DestinationModel> _destinations;
    private int _selectdDestinationId;
    private DestinationModel _selectedDestination;
    private string _winner = "pending...";

    protected override void OnInitialized()
    {

        selectedPassengerId = 0;

        _passengers = new List<PassengerModel>();
        _destinations = new List<DestinationModel>();
        _selectedDestination = new DestinationModel();



    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {

            _passengers = passengerService.GetAllPassengers();
            _destinations = destinationService.GetAllDestinations();

            var dateTime = DateTime.Now;
            currentWeekDay = dateTime.DayOfWeek.ToString();
            currentMonth = DateTime.Now.ToString("MMMM") + " " + DateTime.Now.ToString("dd") + ", " + DateTime.Now.ToString("yyyy");

            NavigationManager.LocationChanged += OnLocationChanges;
             _winner = destinationService.GetWinner(); 
            StateHasChanged();
        }

    }

    private string GetMonthByNumber(string n)
    {
        string month = string.Empty;

        return month;
    }

    private void GoToDest()
    {

        NavigationManager.NavigateTo("/destination");


    }

    private void OnSubmit()
    {
        _selectedDestination = destinationService.GetDestinationNameById(_selectdDestinationId);
        passengerService.SetPassengerVote(selectedPassengerId,_selectedDestination.name);
        _passengers = passengerService.GetAllPassengers();
        selectedPassengerId = 0;
        _selectdDestinationId = 0;
        _selectedDestination.name = string.Empty;
        destinationService.AddVoteToDestination(_selectedDestination.Id);
        _winner = destinationService.GetWinner(); 
        StateHasChanged();


    }

    private void ResetAllVotes()
    {
        destinationService.ResetAllVotes();
        _passengers = passengerService.GetAllPassengers();

        _winner = destinationService.GetWinner(); 


    }

    private void OnLocationChanges(object sender, LocationChangedEventArgs e)
    {
        var kk = AppData.Winner;

        StateHasChanged();
    }

    public class Passenger
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public bool Isvoted { get; set; }
        public DayOfWeek Day { get; set; }

    }


}




